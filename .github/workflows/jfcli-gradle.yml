# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: JF-CLI with Gradle
on:
# TURN-OFF on every push 
  push:
    branches: 
    #  - nobuildonpush
      - main
    paths-ignore: # When the below folders are checked-in, the GitHub Actions job will not start.
    #  - '.github/**'
      - 'target/**'
      - 'gradle/**'
      - '.mvn/**'
      - '.devcontainer/**'
      - '.jfrog/**'
#   pull_request:
#     branches: [ main ]
# issue_comment triggers this action on each comment on issues and pull requests
  issue_comment:
    types: [created]
  pull_request_target:
    types: [opened, synchronize]
permissions:
  actions: read # for detecting the Github Actions environment.
  id-token: write # for creating OIDC tokens for signing.
  packages: write # for uploading attestations.
  contents: read
  security-events: write # Required for uploading code scanning.
jobs:
  gradlePackage:
    name: Gradle Package
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        java: [17 ]
        include:
          - language: ['java-kotlin']
            build-mode: none
    env:  
      JAVA_PROVIDER: 'corretto'
      JAVA_VERSION: '17'
      JF_RT_URL: https://${{ vars.JF_NAME }}.jfrog.io
      RT_REPO_GRADLE_VIRTUAL: 'app-gradle-virtual'
      JOB_SUMMARY: false
      JFROG_CLI_LOG_LEVEL: ${{vars.JFROG_CLI_LOG_LEVEL}} # DEBUG, INFO, WARN, ERROR
      BUILD_NAME: 'sv-spring-petclinic'
      BUILD_ID: "ga-gdl-${{ github.run_number }}" # ref: https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/accessing-contextual-information-about-workflow-runs#github-context
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20   # ref  https://docs.github.com/en/actions/writing-workflows/workflow-syntax-for-github-actions#jobsjob_idtimeout-minutes
    steps:
      # Use the specific setup-cli branch. Ref https://github.com/marketplace/actions/setup-jfrog-cli
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v4
        id: setup-cli
        env:
          JF_URL: ${{env.JF_RT_URL}}
          JFROG_CLI_RELEASES_REPO: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_GRADLE_VIRTUAL}}' 
          JFROG_CLI_EXTRACTORS_REMOTE: '${{ env.JF_RT_URL }}/artifactory/${{ env.RT_REPO_GRADLE_VIRTUAL}}'
          JF_GIT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          oidc-provider-name: ${{ vars.JF_OIDC_PROVIDER_NAME }}
          disable-job-summary: ${{env.JOB_SUMMARY}}

      - name: Clone VCS
        uses: actions/checkout@v4 # ref: https://github.com/actions/checkout

      - name: Java provider = ${{ env.JAVA_PROVIDER }} with ver = ${{ env.JAVA_VERSION }} 
        uses: actions/setup-java@v4   # ref https://github.com/actions/setup-java
        with:
          distribution: ${{ env.JAVA_PROVIDER }} # corretto
          java-version: ${{ env.JAVA_VERSION }}  # 17

      - name: Setup Gradle    # ref https://docs.github.com/en/enterprise-cloud@latest/actions/use-cases-and-examples/building-and-testing/building-and-testing-java-with-gradle
        uses: gradle/actions/setup-gradle@af1da67850ed9a4cedd57bfd976089dd991e2582 # v4.0.0

      - name: Software version
        run: |
          # JFrog CLI version
          jf --version
          # Ping the server
          jf rt ping
          # Java
          java -version
          # MVN
          mvn -version
          # Gradle
          gradle -v
          # Docker
          docker -v
          # Python
          python3 -V
          pip3 -V
          # jf config
          jf config show

      - name: Config jf with gradle repos
        run: |
          export JFROG_CLI_LOG_LEVEL=${{ env.JFROG_CLI_LOG_LEVEL }}
          export JFROG_CLI_LOG_TIMESTAMP=DATE_AND_TIME
          jf gradlec --repo-deploy ${{ env.RT_REPO_GRADLE_VIRTUAL}} --repo-resolve ${{ env.RT_REPO_GRADLE_VIRTUAL}} --repo-deploy ${{ env.RT_REPO_GRADLE_VIRTUAL}}

      - name: list folder
        run: |
          pwd
          ls -lrta /home/runner/work/spring-petclinic/spring-petclinic

          echo "OIDC_PROVIDER_NAME = ${{ vars.JF_OIDC_PROVIDER_NAME }}"
          echo "GITHUB_REPOSITORY = $GITHUB_REPOSITORY"
          echo "GITHUB_SHA = $GITHUB_SHA"
          echo "GITHUB_REPOSITORY_ID = $GITHUB_REPOSITORY_ID"

          cd /home/runner/work/spring-petclinic/spring-petclinic

      - name: prestep-summary
        run: |
          jfcliv=`jf --version`
          echo "# :frog: Prestep Summary :pushpin:" >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " " >> $GITHUB_STEP_SUMMARY
          echo " - Installed JFrog CLI [${jfcliv}](https://jfrog.com/getcli/) and Java [${{ env.JAVA_PROVIDER }}](https://github.com/actions/setup-java) v${{ env.JAVA_VERSION }} " >> $GITHUB_STEP_SUMMARY
          echo " - Configured the JFrog Cli with SaaS Artifactory OIDC integration  " >> $GITHUB_STEP_SUMMARY
# Package
      - name: Create Build
        run: |
          jf gradle clean artifactoryPublish -x test -b ./build.gradle --build-name=${{ env.BUILD_NAME}} --build-number=${{ env.BUILD_ID}} 

      - name: build publish env vars   # These properties were captured in Builds >> spring-petclinic >> version >> Environment tab
        run: |
          export e_env="e_demo" e_org="e_ps" e_team="e_arch" e_build="gradle" e_job="github-action" e_product="artifactory" e_features="package,buildinfo"

 # Build Info
    # Executive Order: 
    #       https://www.whitehouse.gov/briefing-room/presidential-actions/2021/05/12/executive-order-on-improving-the-nations-cybersecurity/
    #       https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity
    # US Dept of Commerce: https://www.ntia.gov/page/software-bill-materials
    # US Cyber Defence Agency: https://www.cisa.gov/sbom
    # NIST: https://www.nist.gov/itl/executive-order-14028-improving-nations-cybersecurity/software-security-supply-chains-software-1
    # NITA: https://www.ntia.gov/page/software-bill-materials 
      - name: Collect env
        run: jf rt bce ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 
 
      - name: Add VCS info
        run: jf rt bag ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} 

      - name: Build Publish
        run: jf rt bp ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} --detailed-summary=true

# Set properties      
      - name: Set properties # These properties were captured Artifacts >> repo path 'spring-petclinic.---.jar' >> Properties
        run: |
          ts="cmd.$(date '+%Y-%m-%d-%H-%M')" 
          jf rt sp "job=github-action;env=demo;org=ps;team=arch;pack_cat=webapp;build=gradle;product=artifactory;features=package,buildinfo;ts=ts-${BUILD_ID}" --build="${{ env.BUILD_NAME}}/${{ env.BUILD_ID}}"

      - name: Query build info
        env: 
          BUILD_INFO_JSON: "BuildInfo-${{ env.BUILD_ID}}.json"
        run: |
           jf rt curl "/api/build/${{ env.BUILD_NAME}}/${{ env.BUILD_ID}}" -o $BUILD_INFO_JSON
           cat $BUILD_INFO_JSON
      
      - name: Promote the build
        run: jf rt bpr ${{ env.BUILD_NAME}} ${{ env.BUILD_ID}} app-gradle-rc-local --status='release candidate' --comment='webservice is now release candidate' --copy=true --props="maintainer=svenkat;stage=staging"
